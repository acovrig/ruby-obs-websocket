#!/usr/bin/env ruby
# SPDX-License-Identifier: MIT

require 'json'
require 'open-uri'
require 'uri'

require 'active_support/core_ext/string/inflections'

class Type
  def inspect
    to_s
  end

  def optional?
    false
  end
end

def simple_type(name)
  Type.new.tap do |o|
    o.define_singleton_method(:to_s) do
      "TypeConverters::#{name}"
    end

    o.define_singleton_method(:as_yard) do
      case name
      when 'Any'
        'Object'
      when 'Number'
        'Numeric'
      else
        name
      end
    end
  end
end

def array_type(element)
  Type.new.tap do |o|
    o.define_singleton_method(:to_s) do
      "TypeConverters::Array[#{element}]"
    end

    o.define_singleton_method(:as_yard) do
      "Array<#{element.as_yard}>"
    end
  end
end

def object_type(**fields)
  Type.new.tap do |o|
    o.define_singleton_method(:to_s) do
      if fields.empty?
        "TypeConverters::Object"
      else
        "TypeConverters::Object[#{fields}]"
      end
    end

    o.define_singleton_method(:as_yard) do
      'Hash'
    end

    o.define_singleton_method(:add_field) do |name, field|
      fields[name] = field
    end
  end
end

def optional_type(element)
  Type.new.tap do |o|
    o.define_singleton_method(:to_s) do
      "TypeConverters::Optional[#{element}]"
    end

    o.define_singleton_method(:as_yard) do
      "#{element.as_yard}, nil"
    end

    o.define_singleton_method(:optional?) do
      true
    end

    o.define_singleton_method(:add_field) do |name, field|
      element.add_field(name, field)
    end
  end
end

def parse_type(type)
  case type
  when /\AArray<(.*)>\z/
    array_type(parse_type($1))
  when 'Object'
    object_type
  when 'String', 'Number', 'Boolean', 'Any'
    simple_type(type)
  else
    fail "Type not recognized: #{type}"
  end
end

@api_version = ARGV[0] or fail 'Usage: generate-api VERSION'
def doc_uri(id = nil)
  uri = "https://github.com/obsproject/obs-websocket/blob/#{@api_version}/docs/generated/protocol.md"
  id ? "#{uri}##{id.gsub(/[^A-Za-z0-9]/, '').downcase}" : uri
end

protocol_uri = URI("https://raw.githubusercontent.com/obsproject/obs-websocket/#{@api_version}/docs/generated/protocol.json")
protocol = JSON.parse(protocol_uri.open(&:read))

def build_fields(fields)
  fields.each_with_object({}) do |field, result|
    name = field.fetch('valueName')
    type = parse_type(field.fetch('valueType'))
    type = optional_type(type) if field.fetch('valueOptional', false)

    case name
    when /\A(\w+)\.(\w+)\z/
      result[$1.underscore.intern][:type].add_field(
        $2.underscore.intern,
        type: type,
        wire_name: $2,
      )
    when /\A\w+\z/
      result[$&.underscore.intern] = {
        type: type,
        wire_name: $&,
      }
    else
      fail "Unexpected valueName: #{name}"
    end
  end
end

enums = protocol.fetch('enums').to_h do |enum|
  [
    enum.fetch('enumType'),
    members: enum.fetch('enumIdentifiers').to_h {|mem|
      [
        mem.fetch('enumIdentifier'),
        value: mem.fetch('enumValue'),
        deprecated: mem.fetch('deprecated'),
      ]
    },
  ]
end

events = protocol.fetch('events').to_h do |event|
  [
    event.fetch('eventType'),
    fields: build_fields(event.fetch('dataFields')),
    deprecated: event.fetch('deprecated'),
  ]
end

requests = protocol.fetch('requests').to_h do |req|
  [
    req.fetch('requestType'),
    request_fields: build_fields(req.fetch('requestFields')),
    response_fields: build_fields(req.fetch('responseFields')),
    deprecated: req.fetch('deprecated'),
  ]
end

puts <<EOF
# frozen_string_literal: false
#
# ** DO NOT EDIT - AUTO-GENERATED CODE **
#
# To edit the content of this file, modify `codegen/generate-protocol` then run `rake codegen`.
#
# ** DO NOT EDIT - AUTO-GENERATED CODE **
#

# The protocol definition of obs-websocket. Generated from <#{protocol_uri}>.
# @see #{doc_uri}
module OBS::WebSocket::Protocol
  # The version of obs-websocket from which this protocol definition is genereted.
  VERSION = #{@api_version.dump}
EOF

puts <<EOF
module Enums
EOF

enums.each do |name, enum|
  next if name == 'ObsMediaInputAction'  # This type has an ill-formed documentation

  puts <<EOF
  # @see #{doc_uri(name)}
  module #{name}
EOF
  enum[:members].each do |mname, mem|
    puts <<EOF
    # @see #{doc_uri("#{name}::#{mname}")}
    #{mname} = #{mem[:value]}
EOF
  end
  puts <<EOF
  end
EOF
end

puts <<EOF
end  # module Enums
EOF

puts <<EOF
module Events
EOF

events.each do |name, event|
  puts <<EOF
  # An instance of <tt>#{name}</tt> event.
  # @see #{doc_uri(name)}
  class #{name} < Event
    TYPE = #{name.dump}
    CLASSES_BY_TYPE[TYPE] = self
EOF
  event[:fields].each do |fname, field|
    puts <<EOF
    # @!attribute [r] #{fname}
    # @return [#{field[:type].as_yard}] <tt>#{field[:wire_name]}</tt> field
    def #{fname}; get_field(#{field[:wire_name].dump}, #{field[:type]}); end
EOF
  end
  puts <<EOF
  end
EOF
end

puts <<EOF
end  # module Events
EOF

puts <<EOF
module Requests
EOF

requests.each do |name, request|
  puts <<EOF
  # An instance of <tt>#{name}</tt> request.
  # @see Mixins::Request##{name.underscore}
  # @see Responses::#{name}
  # @see #{doc_uri(name)}
  class #{name} < Request
    TYPE = #{name.dump}
    def initialize(args)
      super({
EOF
  request[:request_fields].each do |fname, field|
    puts <<EOF
        #{field[:wire_name].dump} => begin
          #{field[:type]}.as_json(args[:#{fname}])
        rescue ConversionError => e
          raise TypeError, #{fname.to_s.dump} ": \#{e.message}"
        end,
EOF
  end
  puts <<EOF
      })
    end
  end
EOF
end

puts <<EOF
end  # module Requests
EOF

puts <<EOF
module Responses
EOF

requests.each do |name, request|
  puts <<EOF
  # A response to <tt>#{name}</tt> request.
  # @see Mixins::Request##{name.underscore}
  # @see #{doc_uri(name)}
  class #{name} < Response
EOF
  request[:response_fields].each do |fname, field|
    puts <<EOF
    # @!attribute [r] #{fname}
    # @return [#{field[:type].as_yard}] <tt>#{field[:wire_name]}</tt> field
    def #{fname}; get_field(#{field[:wire_name].dump}, #{field[:type]}); end
EOF
  end
  puts <<EOF
    Requests::#{name}::Response = Responses::#{name}
  end
EOF
end

puts <<EOF
end  # module Responses
EOF

puts <<EOF
module Mixins
module Event
EOF

events.each do |name, event|
  puts <<EOF
  # Adds an event handler for <tt>#{name}</tt> event.
  # @param executor the executor on which the callback is invoked
  # @yieldparam event [Events::#{name}] the event object
  # @return [void]
  # @see #{doc_uri(name)}
EOF
  puts <<EOF if event[:deprecated]
  # @deprecated This type of event is deprecated.
EOF
  puts <<EOF
  def on_#{name.underscore}(executor: default_executor, &listener)
    on(#{name.dump}, executor: executor, &listener)
  end
EOF
end

puts <<EOF
end  # module Event
EOF

puts <<EOF
module Request
EOF

requests.each do |name, request|
  puts <<EOF
  # Sends <tt>#{name}</tt> request.
  # @see #{doc_uri(name)}
EOF
  request[:request_fields].each do |fname, field|
    puts <<EOF
  # @param #{fname} [#{field[:type].as_yard}] <tt>#{field[:wire_name]}</tt> field
EOF
  end
  puts <<EOF if request[:deprecated]
  # @deprecated This type of request is deprecated.
EOF
  puts <<EOF
  # @return [Future<Responses::#{name}>]
  def #{name.underscore}(#{request[:request_fields].map {|fname, field| "#{fname}:#{" nil" if field[:type].optional?}" }.join(', ')})
    send_request(Requests::#{name}.new({#{request[:request_fields].map {|fname,| "#{fname}: #{fname}" }.join(', ')}}))
  end
EOF
end

puts <<EOF
end  # module Request
end  # module Mixins
EOF

puts <<EOF
end  # module OBS::WebSocket::Protocol
EOF
